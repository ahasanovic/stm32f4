/*void parsiraj(char damir[],int tmp)
{
	int i=(int)sizeof(damir);
	printUSART2("\n Parsiraj \n");
	if(tmp==g_usart2_ridx)
	return;
	printUSART2("\n tmp=%d \n",tmp);
	printUSART2("\n i=%d \n",g_usart2_ridx);
	if(!emptyPlace(damir))
		error=1;
	else
	{
		char key[emptyPlace(damir)];
		int ii=0;	
		
		while(tmp<g_usart2_ridx){
			if(damir[tmp]==' ')
				break;
			key[ii]=damir[tmp];
			++ii;
			printUSART2("\nkljucna rijec je %c \n",damir[ii]);
			printUSART2("\n--%d--- \n",ii);
			++tmp;
		}
		
		while(damir[tmp]!=' '){
			key[ii]=damir[tmp];
			++ii;
			++tmp;
		}
		int t=emptyPlace(damir);
		int z=0;
		for(;z<t;++z)
			printUSART2("\nkljucna rijec je %c \n",key[z]);
		
		if(!keyWord(key))
			error=1;
		else{
			keyword=keyWord(key);
			++tmp;
			printUSART2("\nBroj kljucne rijeci: %d\n   Karakter: %c\n",keyword,damir[tmp]);
			
			switch(keyword)
			{
				case 1:
				{							
						if(damir[tmp] == 's')
						{
							if(damir[tmp+1]==' ' && isLed(damir[tmp+2]) && damir[tmp+3]==' ' && isOn(damir[tmp+4]))
								{
									staticState(damir[tmp+2] -'0', damir[tmp+4]-'0');
									printUSART2("\n LED s %d, %d",damir[tmp+2] -'0', damir[tmp+4]-'0' );
								}
							else
							{
								error=1;
							}
							return;
						}
						
						if(damir[tmp] == 'b')
						{
							while
							if(damir[tmp+1]==' ' && isLed(damir[tmp+2]) && damir[tmp+3]==' ' && isBlink(damir[tmp+4]) && damir[tmp+5]==' ' && isBlink(damir[tmp+6]))
								blinkState(damir[tmp+2] -'0', damir[tmp+4]-'0', damir[tmp+6]-'0');
							printUSART2("\n LED s %d %d %d",damir[tmp+2] -'0', damir[tmp+4]-'0', damir[tmp+6]-'0' );
							return;	
						}
		
						if(damir[tmp] == 'p')
						{
							char a[g_usart2_ridx-2-tmp];
							int ii=0, jj = tmp, D;	
							tmp += 2;
							while(damir[tmp]!=' ' || damir[tmp] != '\0'){
								a[ii]=damir[tmp];
								++ii;
								++tmp;
							}

							if(isLed(damir[tmp]) && isDutyCicle(a))
							{
								D = isDutyCicle(a);
								pwmState(damir[tmp] -'0', D);
							}
							printUSART2("\n LED s %d, %d",damir[tmp] -'0', D);
							return;
						
						}
						else
							printf("Error ");
				}
				break;
			case 2:
							printUSART2("\nHELP\n");
			break;
		
		}
	}
	}
	if(error)
	printUSART2("\nError: Unknown command!!!\n");
}

void parser_function(uint8_t array[])
{
		parsiraj(array,z);
		printUSART2("\n C=%d\n",z); 
		z=g_usart2_ridx+1;
		printUSART2("\n C=%d\n",z);
}



int equal(char * word,char *param)
{
	int i=0;
	if(strlen(word)!= strlen(param))
		return 0;
	for(;i<strlen(param);++i)
	{
		printUSART2("\n%c <-> %c",word[i],param[i]);
		if(word[i]!=param[i])
			return 0;
	}
	printUSART2("\n");
	return 1;
}
